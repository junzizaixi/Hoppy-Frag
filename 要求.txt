编程作业＃6：3D绘图再访一种WebGL风格


概要：
您将使用WebGL和GLSL着色器创建3D模型的交互式可视化。 原则上，你将重新创建程序进度中所要求的体验，而不是使用（2D）HTMLS画布的例程，您将利用WebGL API并提供您自己的着色器来完成那个目标。 计划4所依据的一些挑战在这种情况下不适用（例如，能见度将会是使用Z缓冲区进行处理，而不是显式实现画家算法），而新概念则相关WebGL的工作方式现在需要您的关注（例如，将WebGL上下文与您的自定义接口着色器，从JavaScript代码向着色器传递属性和Unrms，组织你的几何数据到缓冲区等）


学习目标：
为了帮助您理解图形管道的原理如何具体化为具体的绘图任务，了解WebGL如何使您正式化和编排此过程。 我们希望Pro 5有5熟悉你自己的着色器; 你将在这项任务中采取的重要的下一步是了解它们如何适应更广泛的WebGL API（以及其他JavaScript应用程序）。



评估：根据我们的等级计划。 如果你打开一个可行的，完整提交,你会得到一个“满意的成绩”。 对于具有附加功能的人员，将获得较高的分数。
Handin：将作为Canvas任务，确保您打开了程序跑动的所需的所有文件。


描述

您需要使用WebGL JavaScriptAPI创建一个3D对象的交互式绘图和您的自定义实现着色器。就你的物体的几何性质和复杂性而言预计将可视化，这个任务类似于任务四，您需要创建一个3D对象相对简单（例如多面体，模拟为封闭表面，分割成三角形，但希望你会做一些更有趣的事情！），并采取适当的行动，使用透视来呈现2D视图投影。与程序4类似，您选择显示的对象至少需要足够复杂才能提供帮助您直观地欣赏透视投影，并展示对可见表面确定的需求（即你会需要比飞机上的平面物体更复杂的东西）。渲染的图像需要依赖于用户可以交互地改变参数，例如使用滑块，输入框或其他接口元素。这些参数至少需要对绘制的2D投影形状产生影响。对于例如，他们可以改变3D世界中物体的位置，改变相机相对于物体的位置，或改变透视投影的参数（可选地，它们可以控制更多方面，如颜色，程序纹理，灯光或分层模型的连接）。

由于您必须提供的视觉内容可能与程序4所要求的非常相似，因此重要的是要强调你必须做的不同。在P4中，您明确要求实施这些操作通常是图形管线的责任。例如，在调用任何实际绘图之前命令，你必须明确地将顶点变换到摄像机坐标系中，应用投影transfom（使用代数，通过twgl.m4库），将视口变换应用于生成的2D值（其中在标准化显示坐标中），然后才实际调用画布绘制函数。交付这个任务时，预计提供给顶点着色器的顶点数据将处于世界中坐标（或甚至是对象本地坐标，如果与世界坐标不同），它将是着色器的负责应用必要的转换将这些3D位置转换为（x，y，z）三元组适用于绘制（其中（x，y）是实际的显示位置，z将用于可见表面通过Z缓冲器进行确定）。转换本身是您将在着色器代码之外构建的东西，并作为统一变量（mat4类型）与着色器通信。此外，而不是实现自己的可见表面确定技术（例如画家的算法），您可以让Z缓冲区为您完成这项任务再一次，您将有责任在顶点着色器中生成适当的z值，以便允许Z缓冲区来完成它的任务。

您将为此任务实现的着色器不需要过于复杂。机会是这样的您为程序5制作的2个着色器对中的“更简单”将是完全足够的（这就是说，很酷欢迎寻找替代品，并可以给你项目点）。至少在视觉复杂性方面你被要求在三维模型（或多边形）中使用的颜色具有可变性，如果您只是指定一个单一的平面颜色用于这些三角形中的任何一个，就可以（对于此作业）。或者你可以更雄心勃勃，并且模型表面的着色取决于更复杂的事物（例如光线，或三角相对于相机的方向）。还要注意你所要做的事情之间的差异对于程序5和此任务：在PS中，您使用的着色器沙箱已经负责生成为你提供转换矩阵（并将它们作为制服暴露给顶点着色器），和还通过填充相应的内容来处理将几何数据传送给着色器的细节缓冲区。在这个任务中，你将自己处理这些API元素。你将不得不沟通在着色器代码和主机JavaScript程序之间的变量，组织你的几何数据（例如顶点）位置，颜色）放入缓冲区，并将其适当地绑定。

在课上，我们讨论了在WebGL中设置事物（例如编译/链接/附加着色器，绑定属性/制服，设置缓冲区）可以通过直接使用WebGL API调用完成完成这些（不可否认，有时是迂腐的）任务，或者使用工具箱（如twgl）来帮助你完成这个过程。这在我们在课堂上讨论的代码示例中有例证。 对于这项任务，您可以自由选择做法。 此外，我们期望您可以（尽管您不必......）逐步构建整个程序从一个提供的例子开始，只添加一些新的行
的代码，同时仍然可以看到一些视觉信息作为您的输出。

以上描述传达了您的实施应具备的基本功能。上面和超越实现可以冒险在以下方面：

・使用可交互操作的分层3D对象。 处理这些模型的正确方法也将通过模型变换（即从本地坐标到世界坐标）   一直到顶点着色器（谁将负责应用它），而几何组件的模型本身将被输入到本地坐标中的顶点缓冲区中。
。计算法线，将这些线条交给着色器，并用它们来控制三角形的着色一个有趣而不平凡的方式（即从简单的  解决方案中突破单一的，不变的颜色到每个三角形）。
。模型化几个对象，使用多个单个顶点/片段着色器对用于不同的对象现场。
。实现一个令人兴奋和酷炫的着色器，三角形内的渐变颜色过渡，或实现一个有趣的伪（或程序）纹理。

实施提示和技巧：
使用你的P4作为参考一样，除了你需要以不同的方式绘制三角形。一切转化和不一样的。您的相机用户界面可以重新使用。
请注意，顶点着色器输出的坐标位于标准化设备中坐标。开始简单。在课堂上给出的例子首先在屏幕坐标中绘制一个纯色三角形。然后，您可以慢慢添加更多内容：转换，更多三角形，将颜色传递给片段着色器，将颜色传递给顶点着色器，将法线传递给顶点着色器，...
・请记住，我们传递每个顶点的信息而不是每个三角形。你可以从3开始每个三角形的顶点，每个顶点具有相同的颜色和正常。你可以通过任何你想要的制服。您可以决定通过模型，视图和投影矩阵分开（所以有3个矩阵），并在顶点着色器中将它们相乘。这样你可能保留更多的灵活性
・不要忘记打开深度测试。清除窗口时不要忘记清除Z缓冲区








